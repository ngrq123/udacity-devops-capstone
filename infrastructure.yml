Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to network resource names
        Type: String
        Default: Currency-Converter-App

    VpcCIDR: 
        Description: The IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16
    
    PublicSubnet1CIDR:
        Description: The IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.0.0/24

    PublicSubnet2CIDR:
        Description: The IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.1.0/24

    PrivateSubnet1CIDR:
        Description: The IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.0.2.0/24

    PrivateSubnet2CIDR:
        Description: The IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.0.3.0/24

    KubernetesClusterName:
        Description: The name of the Kubernetes cluster control plane
        Type: String
        Default: udacity-devops-capstone-eks-cluster
    
    NumInstances:
        Description: The minimum number of instances at any point in time
        Type: String
        Default: 4

    EC2SSHKey:
        Description: The name of the EC2 SSH key
        Type: String
        Default: udacity-devops-capstone
    
Resources:

    EKSClusterRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                      Service:
                      - eks.amazonaws.com
                  Action:
                  - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

    EKSWorkerNodeRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                      Service:
                      - ec2.amazonaws.com
                  Action:
                  - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
                - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
                - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

    VPC:
        Type: AWS::EC2::VPC
        Properties: 
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags: 
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName
            
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties: 
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway1: 
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security group for load balancer
            SecurityGroupEgress: 
                - CidrIp: 0.0.0.0/0
                  FromPort: 0
                  IpProtocol: tcp
                  ToPort: 65535
            SecurityGroupIngress:
                - CidrIp: 0.0.0.0/0
                  FromPort: 0
                  IpProtocol: tcp
                  ToPort: 65535
            VpcId: !Ref VPC

    BastionHostSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Security group for bastion hosts
            SecurityGroupEgress: 
                - CidrIp: 0.0.0.0/0
                  FromPort: 0
                  IpProtocol: tcp
                  ToPort: 65535
            SecurityGroupIngress:
                - CidrIp: 0.0.0.0/0
                  FromPort: 0
                  IpProtocol: tcp
                  ToPort: 65535
            VpcId: !Ref VPC

    ClusterSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Security group for EKS cluster
            SecurityGroupEgress: 
                - CidrIp: 0.0.0.0/0
                  FromPort: 0
                  IpProtocol: tcp
                  ToPort: 65535
            SecurityGroupIngress:
                - CidrIp: 0.0.0.0/0
                  FromPort: 0
                  IpProtocol: tcp
                  ToPort: 65535
            VpcId: !Ref VPC

    LoadBalancerTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckEnabled: true
            HealthCheckPort: 80
            HealthCheckProtocol: HTTP
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 10
            VpcId: !Ref VPC

    AutoScalingLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId: ami-003634241a8fcdec0
            InstanceType: t2.micro
            KeyName: !Ref EC2SSHKey
            SecurityGroups: 
                - !Ref BastionHostSecurityGroup

    AutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            LaunchConfigurationName: !Ref AutoScalingLaunchConfiguration
            MaxSize: !Ref NumInstances
            MinSize: 2
            TargetGroupARNs: 
                - !Ref LoadBalancerTargetGroup
            VPCZoneIdentifier: 
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2
            
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            SecurityGroups:
                - !Ref LoadBalancerSecurityGroup
            Subnets:
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2
            Type: application

    LoadBalancerListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - TargetGroupArn: !Ref LoadBalancerTargetGroup
                  Type: forward
            LoadBalancerArn: !Ref LoadBalancer
            Port: 80
            Protocol: HTTP

    LoadBalancerListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties: 
            Actions:
                - TargetGroupArn: !Ref LoadBalancerTargetGroup
                  Type: forward
            Conditions:
                - Field: path-pattern
                  PathPatternConfig: 
                      Values: [/]
            ListenerArn: !Ref LoadBalancerListener
            Priority: 1

    KubernetesCluster:
        Type: AWS::EKS::Cluster
        Properties:
            Name: !Ref KubernetesClusterName
            ResourcesVpcConfig:
                SecurityGroupIds: 
                    - !Ref ClusterSecurityGroup
                SubnetIds:
                - !Ref PrivateSubnet1
                - !Ref PrivateSubnet2
            RoleArn: !GetAtt EKSClusterRole.Arn

    KubernetesNodeGroup:
        Type: AWS::EKS::Nodegroup
        Properties: 
            AmiType: AL2_x86_64
            ClusterName: !Ref KubernetesClusterName
            InstanceTypes:
                - t2.micro
            NodegroupName: !Sub ${KubernetesClusterName}-nodegroup
            NodeRole: !GetAtt EKSWorkerNodeRole.Arn
            ScalingConfig:
                DesiredSize: !Ref NumInstances
                MaxSize: !Ref NumInstances
                MinSize: 2
            RemoteAccess:
                Ec2SshKey: !Ref EC2SSHKey
                SourceSecurityGroups: 
                    - !Ref BastionHostSecurityGroup
            Subnets: 
                - !Ref PrivateSubnet1
                - !Ref PrivateSubnet2
        DependsOn:
            - KubernetesCluster